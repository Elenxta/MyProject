@page "/Account"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider
@inject BookingProvider BookingProvider
@inject NavigationManager NavigationManager 
@if (!isLoggedIn)
{
    <div class="text-center mt-5">
        <h3 style="color: #ff6f91; font-family: 'Dancing Script', cursive;">Please log in to view your bookings</h3>
    </div>
}
else
{
    <div class="text-center mt-5">
        <h3 style="color: #ff69b4; font-family: 'Dancing Script', cursive;">Welcome back, @FirstName @LastName!</h3>
    </div>

    <h3 class="text-center mb-4" style="color: #d63384; font-weight: bold; font-family: 'Poppins', sans-serif;">My Bookings</h3>

    <div class="container my-5">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        
        <!-- Check if there are any active bookings (not cancelled or with empty notes) -->
            @foreach (var bookingItem in bookings.Where(b => string.IsNullOrEmpty(b.Notes) || !b.Notes.Contains("CANCELLED")))
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm" style="border-radius: 15px; background: linear-gradient(to bottom right, #ffdee9, #b5fffc);">
                            <div class="card-body d-flex flex-column" style="color: #8a2be2; font-family: 'Poppins', sans-serif;">
                                <!-- Service and Stylist -->
                                <p><strong>Service:</strong> <span style="color: #ff69b4;">@bookingItem.Service?.Name</span></p>
                                <p><strong>Stylist:</strong> <span style="color: #ff69b4;">@bookingItem.Stylist?.Name</span></p>

                                <!-- Booking Date and Time -->
                                <p><strong>Booking Date:</strong> <span style="color: #ff6f91;">@bookingItem.Date.ToString("MM/dd/yyyy")</span></p>
                                <p><strong>Booking Time:</strong> <span style="color: #ff6f91;">@bookingItem.Time</span></p>

                                <!-- Notes -->
                                <p><strong>Notes:</strong> <span style="color: #ff6f91;">@bookingItem.Notes</span></p>

                                <!-- Cancel Button -->
                                <button @onclick="() => CancelBooking(bookingItem)" class="btn btn-danger w-100 mt-auto" style="border-radius: 10px; font-family: 'Poppins', sans-serif;">Cancel Booking</button>
                            </div>
                        </div>
                    </div>
             }
            
        </div>
    </div>

    <!-- Cancelled Bookings Section -->
    <h3 class="text-center mb-4" style="color: #d63384; font-family: 'Poppins', sans-serif;">Cancelled Bookings</h3>
    <div class="container my-5">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @if (bookings != null && bookings.Any(b => b.Notes != null && b.Notes.Contains("CANCELLED")))
            {
                @foreach (var bookingItem in bookings.Where(b => b.Notes != null && b.Notes.Contains("CANCELLED")))
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm" style="border-radius: 15px; background-color: #ffe6e6;">
                            <div class="card-body d-flex flex-column" style="color: #b30000;">
                                <p><strong>Service:</strong> <span>@bookingItem.Service?.Name</span></p>
                                <p><strong>Stylist:</strong> <span>@bookingItem.Stylist?.Name</span></p>
                                <p><strong>Date:</strong> <span>@bookingItem.Date.ToString("MM/dd/yyyy")</span></p>
                                <p><strong>Time:</strong> <span>@bookingItem.Time</span></p>
                                <p><em>Cancelled</em></p>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center text-muted">No cancelled bookings found.</p>
            }
        </div>
    </div>
}
@code {
    private List<Model.Booking> bookings;
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private bool isLoggedIn { get; set; }

    private async Task CancelBooking(Model.Booking bookingItem)
    {
        // Mark the booking as cancelled in the Notes
        bookingItem.Notes = string.IsNullOrEmpty(bookingItem.Notes)
            ? "CANCELLED"
            : bookingItem.Notes + " | CANCELLED";

        await BookingProvider.UpdateBookingAsync(bookingItem); // Save changes to the database
       
    }

  
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User?.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            var username = authState.User?.Identity?.Name;

            // Retrieve user details
            var user =  UserProvider.GetUserByUsernameAsync(username);

            // Fetch bookings, including related entities
            bookings = await BookingProvider.GetUsersBookingsAsync(user);

            // Set user's first and last name
            FirstName = user.FirstName;
            LastName = user.LastName;
        }
    }
}
