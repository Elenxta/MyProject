@page "/Add Service"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject ServicesProvider ServicesProvider 
@inject NavigationManager NavigationManager

<EditForm Model="@Model" OnValidSubmit="@HandleSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" /> <!-- Displays all validation errors -->

    <div class="container p-4">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-12">
                <div class="card shadow-lg border-0">
                    <div class="card-body bg-pink-light">
                        <!-- Form Title -->
                        <h3 class="card-title text-center mb-4 text-pink">💖 Add a new service 💖</h3>

                        <!-- Service Name Input -->
                        <div class="form-group mb-4">
                            <label for="name" class="form-label text-pink">Service Name</label>
                            <InputText id="name" class="form-control border-pink" @bind-Value="@Model.Name" placeholder="Enter service name" />
                            <ValidationMessage For="@(() => Model.Name)" class="text-danger small" />
                        </div>

                        <!-- Description Input -->
                        <div class="form-group mb-4">
                            <label for="description" class="form-label text-pink">Description</label>
                            <InputTextArea id="description" class="form-control border-pink" @bind-Value="@Model.Description" rows="4" placeholder="Enter service description" />
                            <ValidationMessage For="@(() => Model.Description)" class="text-danger small" />
                        </div>

                        <!-- Price Input -->
                        <div class="form-group mb-4">
                            <label for="price" class="form-label text-pink">Price</label>
                            <div class="input-group">
                                <span class="input-group-text bg-pink text-white">£</span>
                                <InputNumber id="price" class="form-control border-pink" @bind-Value="@Model.Price" placeholder="Enter price (e.g., 9.99)" min="0.01" max="10000.00" />
                            </div>
                            <ValidationMessage For="@(() => Model.Price)" class="text-danger small" />
                        </div>

                        <!-- Duration Input -->
                        <div class="form-group mb-4">
                            <label for="duration" class="form-label text-pink">Duration</label>
                            <InputText id="duration" class="form-control border-pink" @bind-Value="@FormattedDuration" />
                            <ValidationMessage For="@(() => Model.Duration)" class="text-danger small" />
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-pink btn-lg">
                                Add Service
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<!-- Styles for form and input elements -->
<style>
    .bg-pink-light {
        background-color: #f8d3e3; /* Light pink background */
    }

    .text-pink {
        color: #d97baf; /* Pink text */
    }

    .border-pink {
        border: 2px solid #d97baf; /* Pink border */
    }

    .btn-pink {
        background-color: #d97baf; /* Pink button */
        color: white;
    }

        .btn-pink:hover {
            background-color: #eeb4d8; /* Lighter pink on hover */
        }

    .input-group-text.bg-pink {
        background-color: #d97baf;
        color: white;
    }

    .card-body {
        padding: 30px;
        border-radius: 15px;
    }
</style>

@code {
    [Parameter]
    public Service? Service { get; set; }

    private ServiceModel Model { get; set; }

    // This property handles the string input from the user and binds to TimeSpan
    private string FormattedDuration
    {
        get => Model.Duration.ToString(@"hh\:mm"); // Convert TimeSpan to a formatted string
        set
        {
            // Parse input string into TimeSpan, if possible
            if (TimeSpan.TryParseExact(value, @"hh\:mm", null, out var parsedDuration))
            {
                Model.Duration = parsedDuration;
            }
        }
    }

    // Initialize the form with existing service details or a new instance
    protected override void OnParametersSet()
    {
        Model = Service is null ? new ServiceModel() : new ServiceModel(Service);
        base.OnParametersSet();
    }

    // Handle form submission
    private async Task HandleSubmit()
    {
        var service = Service ?? new Service();

        // Map form model back to the service entity
        service.Name = Model.Name;
        service.Description = Model.Description;
        service.Price = Model.Price;
        service.Duration = Model.Duration;

        // Call provider to add the service
        await ServicesProvider.AddService(service);
    }

    // Handle invalid submission (triggered when validation fails)
   

    // Internal class to validate form inputs
    private sealed class ServiceModel
    {
        [Required(ErrorMessage = "Please enter the name of the service.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter the description of the service.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Please enter the price of the service.")]
        public decimal Price { get; set; }

        [Required(ErrorMessage = "Please specify the duration of the service.")]
        public TimeSpan Duration { get; set; }

        // Default constructor for a new service
        public ServiceModel() { }

        // Constructor to map existing service details
        public ServiceModel(Service service)
        {
            Name = service.Name;
            Description = service.Description;
            Price = service.Price;
            Duration = service.Duration;
        }
    }
}



