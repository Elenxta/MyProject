@page "/Booking/{id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model 
@using System.ComponentModel.DataAnnotations
@inject StylistProvider StylistProvider
@inject ServicesProvider ServicesProvider
@inject NavigationManager NavigationManager 
@inject BookingProvider BookingProvider
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container my-5">
    <div class="row">
        <!-- Booking Form -->
        <div class="col-md-6">
            <div class="card p-4 shadow">
                <h3 class="mb-4 text-center">Booking Details</h3>
                <EditForm Model="@this" OnValidSubmit="MakeBooking">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Display the selected service -->
                    <div class="alert alert-info">
                        <h4>You have selected: @service.Name</h4>
                        <p><strong>Price:</strong> @service.Price.ToString("C")</p>
                        <p><strong>Duration:</strong> @service.Duration</p>
                        <p><strong>Description:</strong> @service.Description</p>
                    </div>

                    <!-- Date Picker -->
                    <div class="form-group mb-3">
                        <label for="bookingDate">Select a Date:</label>
                        <InputDate id="bookingDate" @bind-Value="BookingDate" class="form-control" />
                        <ValidationMessage For="@(() => BookingDate)" />
                    </div>

                    <!-- Time Dropdown -->
                    <div class="form-group mb-3">
                        <label for="bookingTime">Select a Time:</label>
                        <InputSelect id="bookingTime" @bind-Value="BookingTime" class="form-control">
                            <option value="" disabled>Select a time</option>
                            <option value="09:00">09:00 AM</option>
                            <option value="09:30">09:30 AM</option>
                            <option value="10:00">10:00 AM</option>
                            <option value="10:30">10:30 AM</option>
                            <option value="11:00">11:00 AM</option>
                            <option value="11:30">11:30 AM</option>
                            <option value="12:00">12:00 PM</option>
                            <option value="12:30">12:30 PM</option>
                            <option value="13:00">01:00 PM</option>
                            <option value="13:30">01:30 PM</option>
                            <option value="14:00">02:00 PM</option>
                            <option value="14:30">02:30 PM</option>
                            <option value="15:00">03:00 PM</option>
                            <option value="15:30">03:30 PM</option>
                            <option value="16:00">04:00 PM</option>
                            <option value="16:30">04:30 PM</option>
                            <option value="17:00">05:00 PM</option>
                            <option value="17:30">05:30 PM</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => BookingTime)" />
                    </div>

                    <!-- Stylist Dropdown -->
                    <div class="form-group mb-3">
                        <label for="stylist">Select a Stylist:</label>
                        <InputSelect id="stylist" @bind-Value="SelectedStylistId" class="form-control">
                            <option value="" disabled>Select a stylist</option>
                            @foreach (var stylist in stylists)
                            {
                                <option value="@stylist.Id">@stylist.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => SelectedStylistId)" />
                    </div>

                    <!-- Notes Section -->
                    <div class="form-group mb-3">
                        <textarea id="notes" class="form-control" rows="4"></textarea>
                    </div>
                </EditForm>
            </div>
        </div>

        <!-- Payment Form -->
        <div class="col-md-6">
            <div class="card p-4 shadow">
                <h3 class="mb-4 text-center">Payment Information</h3>
                <form>
                    <!-- Cardholder's Name -->
                    <div class="form-group mb-3">
                        <label for="cardName">Cardholder's Name:</label>
                        <input id="cardName" type="text" class="form-control" placeholder="John Doe" />
                    </div>

                    <!-- Card Number -->
                    <div class="form-group mb-3">
                        <label for="cardNumber">Card Number:</label>
                        <input id="cardNumber" type="text" class="form-control" placeholder="1234 5678 9012 3456" />
                    </div>

                    <!-- Expiry Date -->
                    <div class="form-group mb-3">
                        <label for="expiryDate">Expiry Date:</label>
                        <input id="expiryDate" type="text" class="form-control" placeholder="MM/YY" />
                    </div>

                    <!-- CVV -->
                    <div class="form-group mb-3">
                        <label for="cvv">CVV:</label>
                        <input id="cvv" type="text" class="form-control" placeholder="123" />
                    </div>

                    <!-- Pay Button -->
                    <button type="button" class="btn btn-success btn-lg w-100 mt-3" @onclick="MakeBooking">💳 Pay Now</button>
                </form>
            </div>
        </div>
    </div>
</div>


<style>

    /* Styling for Both Forms */
    body {
        background-color: #ffe6f2; /* Soft pink background */
        font-family: 'Arial', sans-serif;
    }

    .container {
        max-width: 1100px;
    }

    .card {
        border-radius: 15px;
        background-color: #fff0f5; /* Soft pinkish card background */
    }

    h3 {
        color: #d63384; /* Bold pink */
        font-weight: bold;
    }

    label {
        color: #d63384; /* Pink labels */
        font-weight: bold;
    }

    .form-control {
        border-radius: 10px;
        border: 1px solid #f2a6c7; /* Light pink border */
    }

    .form-control:focus {
        border-color: #d63384; /* Pink focus border */
        box-shadow: 0px 0px 6px rgba(214, 51, 132, 0.5); /* Soft pink focus glow */
    }

    .btn-primary {
        background-color: #d63384;
        border-color: #d63384;
        color: #fff;
        border-radius: 10px;
    }

    .btn-primary:hover {
        background-color: #c52973; /* Darker pink for hover */
    }

    .btn-success {w
        background-color: #ff66b2; /* Bright girly pink */
        border-color: #ff66b2;
        color: #fff;
        border-radius: 10px;
    }

    .btn-success:hover {
        background-color: #ff3385; /* Darker pink for hover */
    }

    .alert-info {
        background-color: #ffe6f2; /* Light pink background */
        color: #d63384; /* Pink text */
    }
</style>

@code {

    public class CreateBooking
    {
        [Required(ErrorMessage = "Please select a date.")]
        [DataType(DataType.Date)]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Please select a time.")]
        public string Time { get; set; }

        [Required(ErrorMessage = "Please select a stylist.")]
        public int StylistId { get; set; }
    }

    [Parameter]
    public int Id { get; set; }
    public DateTime BookingDate { get; set; }
    public string BookingTime { get; set; }
    public int SelectedStylistId { get; set; }

    private PaymentDetails paymentDetails;
    private List<Stylist> stylists;
    private Model.Service service;
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        // Fetches the details of a specific service based on the provided Id.
        service = await ServicesProvider.GetService(Id);

        // Fetches the list of stylists available for selection.
        stylists = await StylistProvider.GetStylistsAsync();
    }

    public async void MakeBooking()
    {
        // gets the logged in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        var user = UserProvider.GetUserByUsername(username)!;

        // Add logic to save the booking to the database here

        // Redirect to checkout or booking confirmation page after the booking is made.
        NavigationManager.NavigateTo($"/checkout/");
    }

    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set; }

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }
}
