@page "/Booking/{id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model 
@using System.ComponentModel.DataAnnotations
@inject StylistProvider StylistProvider
@inject ServicesProvider ServicesProvider
@inject NavigationManager NavigationManager 
@inject BookingProvider BookingProvider
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container my-5">
    <div class="card p-4">
        <h3 class="mb-4">Choose Your Booking Date, Time, and Stylist</h3>
        <EditForm Model="@this" OnValidSubmit="MakeBooking">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Date Picker -->
            <div class="form-group mb-3">
                <label for="bookingDate">Select a Date:</label>
                <InputDate id="bookingDate" @bind-Value="BookingDate" class="form-control" />
                <ValidationMessage For="@(() => BookingDate)" />
            </div>

            <!-- Time Dropdown -->
            <div class="form-group mb-3">
                <label for="bookingTime">Select a Time:</label>
                <InputSelect id="bookingTime" @bind-Value="BookingTime" class="form-control">
                    <option value="" disabled>Select a time</option>
                    <option value="09:00">09:00 AM</option>
                    <option value="09:30">09:30 AM</option>
                    <option value="10:00">10:00 AM</option>
                    <option value="10:30">10:30 AM</option>
                    <option value="11:00">11:00 AM</option>
                    <option value="11:30">11:30 AM</option>
                    <option value="12:00">12:00 PM</option>
                    <option value="12:30">12:30 PM</option>
                    <option value="13:00">01:00 PM</option>
                    <option value="13:30">01:30 PM</option>
                    <option value="14:00">02:00 PM</option>
                    <option value="14:30">02:30 PM</option>
                    <option value="15:00">03:00 PM</option>
                    <option value="15:30">03:30 PM</option>
                    <option value="16:00">04:00 PM</option>
                    <option value="16:30">04:30 PM</option>
                    <option value="17:00">05:00 PM</option>
                    <option value="17:30">05:30 PM</option>
                </InputSelect>
                <ValidationMessage For="@(() => BookingTime)" />
            </div>

            <!-- Stylist Dropdown -->
            <div class="form-group mb-3">
                <label for="stylist">Select a Stylist:</label>
                <InputSelect id="stylist" @bind-Value="SelectedStylistId" class="form-control">
                    <option value="" disabled>Select a stylist</option>
                    @foreach (var stylist in stylists)
                    {
                        <option value="@stylist.Id">@stylist.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => SelectedStylistId)" />
            </div>

            <!-- Notes -->
            <div class="form-group mb-3">
                <label for="note">Add a Note:</label>
                <textarea id="note" class="form-control" rows="3" placeholder="Add any additional notes here..."></textarea>
            </div>
           
            <!-- Book Button -->
            <button type="submit" class="btn btn-primary mt-3">💖 Pay Online</button>
        </EditForm>
    </div>
</div>

 
   
        
<style>
    /* Pink and Pretty Styles */
    body {
        background-color: #ffe6f2;
        font-family: Arial, sans-serif;
    }

    .container {
        max-width: 500px;
    }

    .card {
        background-color: #fff0f5;
        border: none;
        border-radius: 15px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    h3 {
        color: #d63384;
        font-weight: bold;
    }

    label {
        color: #d63384;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #f2a6c7;
    }

        .form-control:focus {
            border-color: #d63384;
            box-shadow: 0 0 5px rgba(214, 51, 132, 0.5);
        }

    .btn-primary {
        background-color: #d63384;
        border-color: #d63384;
        color: #fff;
        border-radius: 8px;
        font-weight: bold;
    }

        .btn-primary:hover {
            background-color: #c52973;
            border-color: #c52973;
        }

    /* Custom pink selection color for options */
    option {
        background-color: #ffe6f2;
        color: #d63384;
    }
    </style>
@code {

    
    public class CreateBooking
    {
        [Required(ErrorMessage = "Please select a date.")]
        [DataType(DataType.Date)]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Please select a time.")]
        public string Time { get; set; }

        [Required(ErrorMessage = "Please select a stylist.")]
        public int StylistId { get; set; }
    }

    [Parameter]
    public int Id { get; set; }
    public DateTime BookingDate { get; set; }
    public string BookingTime { get; set; }
    public int SelectedStylistId { get; set; }
   
    
    private PaymentDetails paymentDetails;
    private List <Stylist> stylists;
    private Model.Service service;
    private EditContext editContext;


        
    protected override async Task OnInitializedAsync()
    {
        // Fetches the details of a specific service based on the provided Id.
        service = await ServicesProvider.GetService(Id);

        // Fetches the list of stylists available for selection.
        stylists = await StylistProvider.GetStylistsAsync();
    }

    // Holds the ID or name of the currently selected stylist, allowing tracking of the user's selection.
    private string selectedStylist { get; set; }
   

    public async void MakeBooking()
    {
        // gets the logged in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        var user = UserProvider.GetUserByUsername(username)!;

        //BookingProvider.CreateBooking()
        NavigationManager.NavigateTo($"/checkout/");
    }
        

    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set; }

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }
}

