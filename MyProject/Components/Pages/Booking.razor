@page "/Booking/{id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model
@using System.ComponentModel.DataAnnotations
@inject StylistProvider StylistProvider
@inject ServicesProvider ServicesProvider
@inject NavigationManager NavigationManager
@inject BookingProvider BookingProvider
@inject UserProvider UserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container my-5">
    <div class="row">
        <!-- Booking Form -->
        <div class="col-md-6">
            <div class="card p-4 shadow" style="background-color: #f8c9d4;">
                <h3 class="mb-4 text-center text-danger">Booking Details</h3>
                <EditForm Model="@booking" OnValidSubmit="SubmitBooking">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Display Selected Service -->
                    <div class="alert alert-info">
                        <h4>You have selected: @service.Name</h4>
                        <p><strong>Price:</strong> @service.Price.ToString("C")</p>
                        <p><strong>Duration:</strong> @service.Duration</p>
                        <p><strong>Description:</strong> @service.Description</p>
                    </div>

                    <!-- Date Picker -->
                    <div class="form-group mb-3">
                        <label for="bookingDate">Select a Date:</label>
                        <InputDate id="bookingDate" @bind-Value="booking.Date" class="form-control" />
                        <ValidationMessage For="@(() => booking.Date)" />
                    </div>

                    <!-- Time Picker -->
                    <div class="form-group mb-3">
                        <label for="bookingTime">Select a Time:</label>
                        <InputSelect id="bookingTime" @bind-Value="booking.Time" class="form-control">
                            <option value="">Select a time</option>
                            @foreach (var time in AvailableTimes)
                            {
                                <option value="@time">@time</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => booking.Time)" />
                    </div>

                    <!-- Stylist Dropdown -->
                    <div class="form-group mb-3">
                        <label for="stylist">Select a Stylist:</label>
                        <InputSelect id="stylist" @bind-Value="booking.SelectedStylistId" class="form-control">
                            <option value="" disabled>Select a stylist</option>
                            @foreach (var stylist in stylists)
                            {
                                <option value="@stylist.Id">@stylist.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => booking.SelectedStylistId)" />
                    </div>

                    <!-- Notes Section -->
                    <div class="form-group mb-3">
                        <label for="notes">Additional Notes:</label>
                        <textarea id="notes" class="form-control" rows="4" @bind="booking.Notes" placeholder="Enter any special requests or comments"></textarea>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-danger btn-lg w-100 mt-3">💳 Pay Now</button>
                </EditForm>
            </div>
        </div>

        <!-- Fake Payment Box -->
        <div class="col-md-6">
            <div class="card p-4 shadow" style="background-color: #f8c9d4;">
                <h3 class="mb-4 text-center text-danger">Payment</h3>
                <div class="alert alert-warning">
                    <p><strong>Payment Summary:</strong></p>
                    <p><strong>Amount:</strong> @service.Price.ToString("C")</p>
                    <p><strong>Payment Method:</strong> Credit/Debit Card</p>
                    <p><strong>Status:</strong> Pending</p>
                </div>

                <!-- Payment Form -->
                <div class="form-group mb-3">
                    <label for="paymentName">Name on Card:</label>
                    <input id="paymentName" type="text" class="form-control" placeholder="Sophie" />
                </div>
                <div class="form-group mb-3">
                    <label for="paymentCardNumber">Card Number:</label>
                    <input id="paymentCardNumber" type="text" class="form-control" placeholder="1234 5678 9012 3456" />
                </div>
                <div class="form-group mb-3">
                    <label for="paymentExpiryDate">Expiry Date:</label>
                    <input id="paymentExpiryDate" type="text" class="form-control" placeholder="MM/YY" />
                </div>
                <div class="form-group mb-3">
                    <label for="paymentCVV">CVV:</label>
                    <input id="paymentCVV" type="text" class="form-control" placeholder="123" />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Styling for the whole page */
    body {
        background-color: #ffe6f7; /* Light pink background */
        font-family: 'Arial', sans-serif;
    }

    .container {
        max-width: 1100px;
    }

    .card {
        border-radius: 15px;
        background-color: #fff0f5; /* Soft pinkish card background */
    }

    h3, label {
        color: #f28fb1; /* Light pink text */
        font-weight: bold;
    }

    .form-control {
        border-radius: 10px;
        border: 1px solid #f28fb1; /* Light pink border */
    }

        .form-control:focus {
            border-color: #f28fb1; /* Pink focus border */
            box-shadow: 0px 0px 6px rgba(242, 143, 177, 0.5); /* Soft pink focus glow */
        }

    .btn-danger {
        background-color: #ff66b2; /* Bright pink */
        border-color: #ff66b2;
        color: #fff;
        border-radius: 10px;
    }

        .btn-danger:hover {
            background-color: #ff3385; /* Darker pink on hover */
        }

    .alert-info {
        background-color: #fce1f2; /* Very light pink background */
        color: #f28fb1; /* Light pink text */
    }

    .text-pink {
        color: #f28fb1; /* Light pink text */
    }
</style>

@code {
    [Parameter] public int Id { get; set; }
    private List<Stylist> stylists = new();
    private Model.Service service = new();
    private List<string> AvailableTimes = new()
    {
        "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30",
        "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30"
    };

    private BookingModel booking = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch service and stylists
        service = await ServicesProvider.GetService(Id);
        stylists = await StylistProvider.GetStylistsAsync();
    }

    private async Task SubmitBooking()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User?.Identity?.Name;

        if (!string.IsNullOrEmpty(username))
        {
            var user = UserProvider.GetUserByUsernameAsync(username);
            await BookingProvider.CreateBooking(user, service.Id, booking.Date, booking.Time, booking.SelectedStylistId, booking.Notes);
            NavigationManager.NavigateTo("/Thankyou");
        }
    }

    private class BookingModel
    {
        [Required(ErrorMessage = "Booking date is required.")]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Booking time is required.")]
        public string Time { get; set; } = string.Empty;

        [Required(ErrorMessage = "Stylist is required.")]
        public int SelectedStylistId { get; set; }

        public string Notes { get; set; } = string.Empty;
    }
}




