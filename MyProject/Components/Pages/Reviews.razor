@page "/reviews"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Model
@using MyProject.Context
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject ReviewProvider ReviewProvider
@inject ServicesProvider ServicesProvider
@inject NavigationManager NavigationManager
@inject DatabaseContext DatabaseContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="container my-5">
    <div class="row">
        <!-- Left Column: Review Form Section -->
        <div class="col-lg-6 mb-5">
            <div class="card shadow-lg p-5" style="border-radius: 20px; background-color: #f9e0f7;">
                <h3 class="mb-4 text-center text-pink font-weight-bold">Write a Review</h3>
                <EditForm Model="@review" OnValidSubmit="SubmitReview">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">@errorMessage</div>
                    }

                    <!-- Service Dropdown -->
                    <div class="form-group mb-4">
                        <label for="service" class="font-weight-bold text-pink">Select Service:</label>
                        <InputSelect id="service" @bind-Value="review.ServiceId" class="form-control form-control-lg">
                            <option value="0" disabled>Select a service</option>
                            @foreach (var service in services)
                            {
                                <option value="@service.Id">@service.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => review.ServiceId)" />
                    </div>

                    <!-- Star Rating Dropdown -->
                    <div class="form-group mb-4">
                        <label for="rating" class="font-weight-bold text-pink">Select Rating:</label>
                        <InputSelect id="rating" @bind-Value="review.Rating" class="form-control form-control-lg">
                            <option value="0" disabled>Select a rating</option>
                            <option value="1">1 Star</option>
                            <option value="2">2 Stars</option>
                            <option value="3">3 Stars</option>
                            <option value="4">4 Stars</option>
                            <option value="5">5 Stars</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => review.Rating)" />
                    </div>

                    <!-- Review Text Area -->
                    <div class="form-group mb-4">
                        <label for="reviewText" class="font-weight-bold text-pink">Your Review:</label>
                        <InputTextArea id="reviewText" @bind-Value="review.ReviewText" class="form-control form-control-lg" placeholder="Write your review here..." rows="4" />
                        <ValidationMessage For="@(() => review.ReviewText)" />
                    </div>

                    <!-- Image Upload -->
                    <div class="form-group mb-4">
                        <label for="imageUpload" class="font-weight-bold text-pink">Upload an Image (optional):</label>
                        <InputFile id="imageUpload" OnChange="HandleFileSelected" class="form-control" />
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-pink btn-lg w-100 mt-3">Submit Review</button>
                </EditForm>
            </div>
        </div>

        <!-- Right Column: Reviews Display Section -->
        <div class="col-lg-6">
            <h4 class="text-center text-pink mb-4 font-weight-bold">Recent Reviews</h4>
            <div class="review-container">
                @if (reviews.Any())
                {
                    @foreach (var reviewItem in reviews)
                    {
                        <div class="card mb-4 shadow-sm" style="border-radius: 20px; background-color: #fff0f5;">
                            <div class="card-body">
                                <p><strong>Service:</strong> @GetServiceName(reviewItem.ServiceId)</p>
                                <p><strong>Rating:</strong> @reviewItem.Rating Star(s)</p>
                                <p><strong>Review:</strong> @reviewItem.ReviewText</p>

                                @if (!string.IsNullOrEmpty(reviewItem.ImageBase64))
                                {
                                    <div class="text-center mt-3">
                                        <img src="data:image/png;base64,@reviewItem.ImageBase64" alt="Uploaded Image" class="img-fluid rounded" style="max-height: 200px; object-fit: cover; border-radius: 15px;" />
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-center text-muted">No reviews yet. Be the first to write one!</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public class ReviewModel
    {
        [Required(ErrorMessage = "Please select a service.")]
        public int ServiceId { get; set; }

        [Required(ErrorMessage = "Please select a rating.")]
        public int Rating { get; set; }

        [Required(ErrorMessage = "Please write a review.")]
        [StringLength(1000, ErrorMessage = "Review cannot be longer than 1000 characters.")]
        public string ReviewText { get; set; } = string.Empty;

        public string ImageBase64 { get; set; }
    }

    private ReviewModel review = new ReviewModel();
    private List<ReviewModel> reviews = new List<ReviewModel>();
    private List<Model.Service> services;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        services = await ServicesProvider.GetAllServicesAsync();
        await LoadReviews();
    }

    private async Task SubmitReview()
    {
        var image = string.IsNullOrEmpty(review.ImageBase64) ? null : review.ImageBase64;

        // Submit the review to the ReviewProvider
        await ReviewProvider.CreateReviewAsync(review.ServiceId, review.Rating,review.ReviewText,review.ImageBase64);

        review = new ReviewModel(); // Reset the form
        await LoadReviews(); // Reload reviews after submission
    }

  private async Task HandleFileSelected(InputFileChangeEventArgs e)
{
    // Get the selected file from the input event args.
    var file = e.File;

    // Check if the file is not null (i.e., a file was selected).
    if (file != null)
    {
        // Use a MemoryStream to hold the file content in memory.
        using (var stream = new MemoryStream())
        {
            // Asynchronously open the file stream and copy its contents to the MemoryStream.
            await file.OpenReadStream().CopyToAsync(stream);

            // Convert the MemoryStream byte array into a Base64 string and assign it to the review object.
            review.ImageBase64 = Convert.ToBase64String(stream.ToArray());
        }
    }
}

    private async Task LoadReviews()
    {
        // Fetch reviews from the ReviewProvider
        var ShowReviews = await ReviewProvider.GetAllReviewsAsync();
        reviews = ShowReviews.Select(r => new ReviewModel
            {
                ServiceId = r.Service.Id,
                Rating = r.Stars,
                ReviewText = r.Description,
                ImageBase64 = r.Images
            }).ToList();
    }

    private string GetServiceName(int serviceId)
    {
        var service = services.FirstOrDefault(s => s.Id == serviceId);
        return service?.Name ?? "Unknown Service";
    }
}



    




