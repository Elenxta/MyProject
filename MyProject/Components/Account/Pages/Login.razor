@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using MyProject.Components.Account.Shared
@using MyProject.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<div class="card">
    <!-- Card body with light background -->
    <div class="card-body bg-light">
        <!-- Title of the card -->
        <h4 class="card-title">Login</h4>

        <!-- Form for handling login functionality with validation on submit -->
        <EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
            <div class="row g-3">
                
                <!-- Email field input -->
                <div class="col-md-6">
                    <label for="email" class="form-label">Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control" placeholder="name@example.com" />
                </div>

                <!-- Password field input -->
                <div class="col-md-6">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                </div>

                <!-- Login button -->
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </div>

                <!-- Register button (redirects to the registration page) -->
                <div class="col-md-2">
                    <a href="@(NavigationManager.ToAbsoluteUri("Account/Register"))" class="btn btn-success w-100">Register</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>
<style>
    .card {
        border: 1px solid #ff99cc;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        background-color: #ffe6f2;
        padding: 2rem;
    }

    .card-title {
        color: #ff66a3;
        font-weight: bold;
        text-align: center;
    }

    .form-label {
        color: #ff66a3;
    }

    .form-control {
        border-color: #ff99cc;
        background-color: #ffe6f2;
    }

        .form-control::placeholder {
            color: #ff66a3;
        }

    .btn-primary {
        background-color: #ff66a3;
        border-color: #ff66a3;
    }

        .btn-primary:hover {
            background-color: #ff3399;
            border-color: #ff3399;
        }

    .btn-success {
        background-color: #ff99cc;
        border-color: #ff99cc;
    }

        .btn-success:hover {
            background-color: #ff66a3;
            border-color: #ff66a3;
        }
</style>
@code {
    private string? statusMessage;
    private bool isError;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }
    public async Task LoginUser()
    {
        // Check if email or password fields are empty
        if (string.IsNullOrWhiteSpace(Model.Email) || string.IsNullOrWhiteSpace(Model.Password))
        {
            statusMessage = "Please fill in all fields.";
            isError = true;
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            statusMessage = "Wrong email or password.";
            isError = true;
        }
    }

    private sealed class LoginModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";
    }
}
